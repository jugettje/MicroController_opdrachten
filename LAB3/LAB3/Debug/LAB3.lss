
LAB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006de  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000649  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000280  00000000  00000000  00000f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ce  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
#include <avr/interrupt.h>

using namespace std;

ISR(TIMER0_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	BIT_FLIP_IN_REG(PORTB, PORTB0);
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	85 b9       	out	0x05, r24	; 5
}
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	BIT_FLIP_IN_REG(PORTB, PORTB1);
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	89 27       	eor	r24, r25
  c8:	85 b9       	out	0x05, r24	; 5
}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
	// The keyword static means that the value of the variable cnt
	// will not have changed when the ISR is executed the next time.
	static uint8_t cnt = 0;
	// Toggle PB2 after 61 count pulses
	if(cnt<31)
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e8:	8f 31       	cpi	r24, 0x1F	; 31
  ea:	20 f4       	brcc	.+8      	; 0xf4 <__vector_9+0x1c>
	{
		cnt ++;
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f2:	03 c0       	rjmp	.+6      	; 0xfa <__vector_9+0x22>
	}
	else
	{
		cnt =0;
  f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		PINB |= (1<< PINB2);
  f8:	1a 9a       	sbi	0x03, 2	; 3
	}
}
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <main>:

int main(void)
{
	PIN_X_OUTPUT(DDRB, DDB0);
 106:	20 9a       	sbi	0x04, 0	; 4
	PIN_X_OUTPUT(DDRB, DDB1);
 108:	21 9a       	sbi	0x04, 1	; 4
	PIN_X_OUTPUT(DDRB, DDB2);
 10a:	22 9a       	sbi	0x04, 2	; 4
	
	//timer 0 in normal operation with max prescaler
	//interrupts on overflow
	//Freq = F_CPU / (2 * 1024 * 2^8) = 30Hz
	BIT_ON_IN_REG(TIMSK0, TOIE0);
 10c:	ee e6       	ldi	r30, 0x6E	; 110
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	BITS_2_ON_IN_REG(TCCR0B, CS10, CS12);
 116:	85 b5       	in	r24, 0x25	; 37
 118:	85 60       	ori	r24, 0x05	; 5
 11a:	85 bd       	out	0x25, r24	; 37
	
	//timer 1 in normal operation with max prescaler
	//interrupts on overflow
	//Freq = F_CPU / (2 * 1024 * 2^16) = 0.1 Hz
	BIT_ON_IN_REG(TIMSK1, TOIE1);
 11c:	ef e6       	ldi	r30, 0x6F	; 111
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	81 60       	ori	r24, 0x01	; 1
 124:	80 83       	st	Z, r24
	BITS_2_ON_IN_REG(TCCR1B, CS10, CS12);
 126:	e1 e8       	ldi	r30, 0x81	; 129
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	85 60       	ori	r24, 0x05	; 5
 12e:	80 83       	st	Z, r24
	
	//timer 2 in normal operation with max prescaler
	//interrupts on overflow
	//Freq = F_CPU / (2 * 1024 * 2^8) = 30 Hz
	// (1/30) * 60 = 2 ....?
	BIT_ON_IN_REG(TIMSK2, TOIE2);
 130:	e0 e7       	ldi	r30, 0x70	; 112
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	81 60       	ori	r24, 0x01	; 1
 138:	80 83       	st	Z, r24
	BITS_3_ON_IN_REG(TCCR2B, CS22, CS21, CS20);
 13a:	e1 eb       	ldi	r30, 0xB1	; 177
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	87 60       	ori	r24, 0x07	; 7
 142:	80 83       	st	Z, r24
	
	sei();
 144:	78 94       	sei
 146:	ff cf       	rjmp	.-2      	; 0x146 <main+0x40>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
