
LAB4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b4  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000242  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037a  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
#include <avr/interrupt.h>

using namespace std;

ISR(TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	static uint16_t cnt = 0;
	
	if(cnt < 500)
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  a8:	84 3f       	cpi	r24, 0xF4	; 244
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	92 07       	cpc	r25, r18
  ae:	30 f4       	brcc	.+12     	; 0xbc <__vector_14+0x2c>
	{
		cnt++;
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <__vector_14+0x36>
	}
	else
	{
		cnt = 0;
  bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		PINB |= (1<<PINB0);
  c4:	18 9a       	sbi	0x03, 0	; 3
	}
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:

int main(void)
{
	BITS_6_ON_IN_REG(DDRB, DDB0, DDB1, DDB2, DDB3, DDB4, DDB5);
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	8f 63       	ori	r24, 0x3F	; 63
  da:	84 b9       	out	0x04, r24	; 4
	 * freq = F_CPU / (2 * 64 * 250 )
	 * 1/freq = 1/500 s
	 * 500 loops for 1 puls so * 500
	 * (1 / 500) * 500 = 1 Hz
	*/
	BIT_ON_IN_REG(TIMSK0, OCIE0A);
  dc:	ee e6       	ldi	r30, 0x6E	; 110
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	BIT_ON_IN_REG(TCCR0A, WGM01);
  e6:	84 b5       	in	r24, 0x24	; 36
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
  ec:	89 ef       	ldi	r24, 0xF9	; 249
  ee:	87 bd       	out	0x27, r24	; 39
	BITS_2_ON_IN_REG(TCCR0B, CS10, CS11);
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	85 bd       	out	0x25, r24	; 37
	/* set mode to ctc
	 * set prescaler to 256
	 * OCR1A = F_CPU / (Freq * 2 * 256) -1 = 31311
	 * set COM1A0 in TCCR1A to set the output directly
	*/
	BIT_ON_IN_REG(TCCR1A, COM1A0);
  f6:	e0 e8       	ldi	r30, 0x80	; 128
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
	OCR1A = 31311;
 100:	8f e4       	ldi	r24, 0x4F	; 79
 102:	9a e7       	ldi	r25, 0x7A	; 122
 104:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 108:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	BITS_2_ON_IN_REG(TCCR1B, CS12, WGM12);
 10c:	e1 e8       	ldi	r30, 0x81	; 129
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	8c 60       	ori	r24, 0x0C	; 12
 114:	80 83       	st	Z, r24
	
	sei();
 116:	78 94       	sei
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x42>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
